#!/bin/sh

#
# Copyright (c) 2016 Aaron Poffenberger <akp@hypernote.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

__progname=$(basename "$0")

TRUE=0
FALSE=1

COMMENTS=$FALSE
FILE='/dev/stdin'
FILTER=''
PROTO=''
MX=$TRUE
DIGSERVER=''

CMD=run
VERSION=1.0

function log_msg {
	local OPTIND o a
	while getopts :p: opt ; do
		case $opt in
			p)
				PAD=$OPTARG
				;;
			*)
				;;
		esac
	done
	shift $(( OPTIND - 1 ))
	msg=$@

	if [ -z "$msg" ] ; then
		return 0
	fi

	if [ -n "$PAD" ] ; then
		printf -v padding "%-${PAD}s" ' '
	fi

	echo "${padding}${msg}"
}

function lookup {
	# +short returns just the answer portion
	# $1 = type -- A, TXT, MX
	# $2 = domain
	dig $DIGSERVER +short $1 $2
}

function process_ips {
	ips=$@

	for ip in $(echo $ips) ; do
		valid=$TRUE
		if [[ -e $FILTER && -x $FILTER ]] ; then
			ip=$($FILTER $ip)
		fi

		if [ -n "$ip" ] ; then
			echo $ip | tr ' ' '\n'
		fi
	done
}

function process_mx {
	domain=$@
	mxs=$(lookup MX $domain | sed 's#.* \(.*\).$#\1#')
	for mx in $(echo $mxs | tr ' ' '\n') ; do
		ips=$(lookup A $mx)

		process_ips $ips
	done
}

function get_ips {
	domain="${1}"
	if [ $COMMENTS -eq $TRUE ] ; then
		echo "#IPs for $domain..."
	fi

	# sed fixes stray spaces inserted in ip addresses
	# e.g., echo '127.0.0 .1' -> 127.0.0.1
	spfs=$(lookup txt $domain \
		       | grep -i spf \
		       | sed 's#\(.*\)\(" "\)\(.*\)#\1\3#g' \
		       | tr -d '"' \
		       | tr -s '\n'
	    )


	if [ -n "$spfs" ] ; then
		ips=$(echo $spfs \
			      | tr ' ' '\n' \
			      | egrep "$PROTO" \
			      | cut -d ':' -f 2-
		   )
		process_ips $ips

		includes=$(echo $spfs \
				   | tr ' ' '\n' \
				   | grep -i include \
				   | cut -d ':' -f 2
			)
		for i in $includes ; do
			get_ips $i
		done

		mxs=$(echo $spfs \
			      | tr ' ' '\n' \
			      | grep -i mx
		   )
		if [ -n "$mxs" ] ; then
			process_mx $domain
		fi

		redirects=$(echo $spfs \
				    | tr ' ' '\n' \
				    | grep -i redirect \
				    | cut -d '=' -f 2
			 )
		for i in $redirects ; do
			get_ips $i
		done
	elif [ $MX -eq $TRUE ] ; then
		process_mx $domain
	fi
}

function version {
	log_msg "$__progname $VERSION"
}

function usage {
	# dispose of stdin data
	if [ ! -t 0 ] ; then
		cat > /dev/null
	fi

	usage="usage: $__progname"
	length=$(expr ${#usage} + 1)

	log_msg "$usage [-acdhlqrsv] [-a] [-c configuration] [-d] \
	[-h] [-l location] [-q]"

	log_msg -p $length "[-r] [-s] [-v] [interface ...]"
}

while getopts :46cd:f:hmt:v: opt ; do
	case $opt in
		4)
			if [ -z "$PROTO" ] ; then
				PROTO='^ip4'
			else
				PROTO="$PROTO|^ip4"
			fi
			;;
		6)
			if [ -z "$PROTO" ] ; then
				PROTO='^ip6'
			else
				PROTO="$PROTO|^ip6"
			fi
			;;
		c)
			COMMENTS=$TRUE
			;;
		d)
			DIGSERVER="@${OPTARG}"
			;;
		f)
			FILE=$OPTARG
			;;
		h)
			CMD="usage"
			;;
		m)
			MX=$FALSE
			;;
		t)
			FILTER="$OPTARG"
			;;
		v)
			CMD="VERSION"
			;;
		:)
			log_msg $__progname: option requires an argument \
				-- $OPTARG
			log_msg
			CMD=abort
			;;
		\?)
			log_msg $__progname: invalid option -- $OPTARG
			log_msg
			CMD=abort
			;;
	esac
done
shift $(( OPTIND - 1 ))
domains=$@

function run {
	if [ -z "$PROTO" ] ; then
		PROTO='^ip4|^ip6'
	fi

	if [ -n "$domains" ] ; then
		for domain in $domains ; do
			get_ips "$domain"
		done
	elif [ -e "$FILE" ] ; then
		while read LINE ; do
			get_ips "$LINE"
		done < "$FILE"
	fi
}

case $CMD in
	run)
		run
		;;
	usage)
		usage
		;;
	VERSION)
		version
		;;
	*)
		usage
		;;
esac
